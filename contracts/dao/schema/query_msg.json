{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "title": "GetConfig",
      "description": "Returns [ConfigResponse]\n\n## Example\n\n```json { \"get_config\": {} } ```",
      "type": "object",
      "required": [
        "get_config"
      ],
      "properties": {
        "get_config": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "TokenList",
      "description": "Queries list of native Tokens associated with the DAO Treasury. Returns [TokenListResponse]\n\n## Example\n\n```json { \"token_list\": {} } ```",
      "type": "object",
      "required": [
        "token_list"
      ],
      "properties": {
        "token_list": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "TokenBalances",
      "description": "Returns [TokenBalancesResponse] All DAO native token Balances\n\n## Example\n\n```json { \"token_balances\": { \"start\"?: \"uosmo\", \"limit\": 30 | 10, \"order\": \"asc\" | \"desc\" } } ```",
      "type": "object",
      "required": [
        "token_balances"
      ],
      "properties": {
        "token_balances": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "order": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RangeOrder"
                },
                {
                  "type": "null"
                }
              ]
            },
            "start": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Proposal",
      "description": "Returns [ProposalResponse]\n\n## Example\n\n```json { \"proposal\": { \"proposal_id\": 1 } } ```",
      "type": "object",
      "required": [
        "proposal"
      ],
      "properties": {
        "proposal": {
          "type": "object",
          "required": [
            "proposal_id"
          ],
          "properties": {
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Proposals",
      "description": "Returns [ProposalsResponse]\n\n## Example\n\n```json { \"proposals\": { \"query\": { \"find_by_status\": { \"status\": \"pending\" | .. | \"executed\" } | \"find_by_proposer\": { \"proposer\": \"osmo1deadbeef\" } | \"everything\": {} }, \"start\"?: 10, \"limit\": 30 | 10, \"order\": \"asc\" | \"desc\" } } ```",
      "type": "object",
      "required": [
        "proposals"
      ],
      "properties": {
        "proposals": {
          "type": "object",
          "required": [
            "query"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "order": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RangeOrder"
                },
                {
                  "type": "null"
                }
              ]
            },
            "query": {
              "$ref": "#/definitions/ProposalsQueryOption"
            },
            "start": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "ProposalCount",
      "description": "Returns the number of proposals in the DAO (u64)\n\n## Example\n\n```json { \"proposal_count\": {} } ```",
      "type": "object",
      "required": [
        "proposal_count"
      ],
      "properties": {
        "proposal_count": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Vote",
      "description": "Returns [VoteResponse]\n\n## Example\n\n```json { \"vote\": { \"proposal_id\": 1, \"voter\": \"osmo1deadbeef\" } } ```",
      "type": "object",
      "required": [
        "vote"
      ],
      "properties": {
        "vote": {
          "type": "object",
          "required": [
            "proposal_id",
            "voter"
          ],
          "properties": {
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "voter": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Votes",
      "description": "Returns [VotesResponse]\n\n## Example\n\n```json { \"votes\": { \"proposal_id\": 1, \"start\"?: \"osmo1deadbeef\", \"limit\": 30 | 10, \"order\": \"asc\" | \"desc\" } } ```",
      "type": "object",
      "required": [
        "votes"
      ],
      "properties": {
        "votes": {
          "type": "object",
          "required": [
            "proposal_id"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "order": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RangeOrder"
                },
                {
                  "type": "null"
                }
              ]
            },
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Deposit",
      "description": "Queries single deposit info by proposal id & address of depositor. Returns [DepositResponse]\n\n## Example\n\n```json { \"deposit\": { \"proposal_id\": 1, \"depositor\": \"osmo1deadbeef\" } } ```",
      "type": "object",
      "required": [
        "deposit"
      ],
      "properties": {
        "deposit": {
          "type": "object",
          "required": [
            "depositor",
            "proposal_id"
          ],
          "properties": {
            "depositor": {
              "type": "string"
            },
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Deposits",
      "description": "Queries multiple deposits info by 1. proposal id 2. depositor address Returns [DepositsResponse]\n\n## Example\n\n```json { \"deposits\": { \"query\": { \"find_by_proposal\": { \"proposal_id\": 1, \"start\"?: \"osmo1deadbeef\" } | \"find_by_depositor\": { \"depositor\": \"osmo1deadbeef\", \"start\"?: 1 } | \"everything\": { \"start\"?: [1, \"osmo1deadbeef\"] } }, \"limit\": 30 | 10, \"order\": \"asc\" | \"desc\" } } ```",
      "type": "object",
      "required": [
        "deposits"
      ],
      "properties": {
        "deposits": {
          "type": "object",
          "required": [
            "query"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "order": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RangeOrder"
                },
                {
                  "type": "null"
                }
              ]
            },
            "query": {
              "$ref": "#/definitions/DepositsQueryOption"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "DepositsQueryOption": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "find_by_proposal"
          ],
          "properties": {
            "find_by_proposal": {
              "type": "object",
              "required": [
                "proposal_id"
              ],
              "properties": {
                "proposal_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "start": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "find_by_depositor"
          ],
          "properties": {
            "find_by_depositor": {
              "type": "object",
              "required": [
                "depositor"
              ],
              "properties": {
                "depositor": {
                  "type": "string"
                },
                "start": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "everything"
          ],
          "properties": {
            "everything": {
              "type": "object",
              "properties": {
                "start": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": [
                    {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ProposalsQueryOption": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "find_by_status"
          ],
          "properties": {
            "find_by_status": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "$ref": "#/definitions/Status"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "find_by_proposer"
          ],
          "properties": {
            "find_by_proposer": {
              "type": "object",
              "required": [
                "proposer"
              ],
              "properties": {
                "proposer": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "everything"
          ],
          "properties": {
            "everything": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RangeOrder": {
      "type": "string",
      "enum": [
        "asc",
        "desc"
      ]
    },
    "Status": {
      "type": "string",
      "enum": [
        "pending",
        "open",
        "rejected",
        "passed",
        "executed"
      ]
    }
  }
}
